<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>spring-boot-mq</artifactId>
		<groupId>com.bugjc</groupId>
		<version>1.0</version>
	</parent>
	<artifactId>spring-boot-activemq</artifactId>
	<packaging>jar</packaging>

	<properties>
		<docker.repostory>registry.cn-hangzhou.aliyuncs.com</docker.repostory>
		<docker.registry.name>jicun</docker.registry.name>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot (依赖管理：继承一些默认的依赖，工程需要依赖的jar包的管理，申明其他dependency的时候就不需要version) -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-activemq</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>

		<plugins>

			<!-- spring-boot-maven-plugin (提供了直接运行项目的插件：如果是通过parent方式继承spring-boot-starter-parent则不用此插件) -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				&lt;!&ndash; 绑定maven命令 &ndash;&gt;
				<executions>
					&lt;!&ndash; 执行mvn package后触发docker:build &ndash;&gt;
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					&lt;!&ndash; 执行mvn deploy后触发docker:build -DpushImage &ndash;&gt;
					<execution>
						<id>push-image</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
						</configuration>
					</execution>

				</executions>

				<configuration>
					&lt;!&ndash; 云端docker构建 &ndash;&gt;
					<dockerHost>http://ip:2375</dockerHost>
					<imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					&lt;!&ndash;true:install阶段也上传，false:只有deploy阶段上传&ndash;&gt;
					<pushImage>true</pushImage>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>

					&lt;!&ndash; 配置仓库账号密码 &ndash;&gt;
					<serverId>docker-hub</serverId>
				</configuration>


			</plugin>-->


		</plugins>

	</build>

</project>
